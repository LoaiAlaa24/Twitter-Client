import Request from './request';
import * as Util from './util';
import CustomError from './error';
const baseURL = 'https://api.twitter.com';
const apiURL = 'https://api.twitter.com/1.1';
const requestTokenURL = '/oauth/request_token';
const authorizationURL = '/oauth/authorize';
const accessTokenURL = '/oauth/access_token';
class Client {
    constructor() {
        this.TokenRequestHeaderParams = {};
        this.setConsumerKey = (consumerKey, consumerSecret) => {
            this.ConsumerKey = consumerKey;
            this.ConsumerSecret = consumerSecret;
        };
        this.setAccessToken = (token, tokenSecret) => {
            this.Token = token;
            this.TokenSecret = tokenSecret;
        };
        this.getLoginUrl = async (callback = '') => {
            this.TokenRequestHeaderParams = Util.createTokenRequestHeaderParams(this.ConsumerKey, { callback });
            this.TokenRequestHeaderParams = Util.createSignature(this.TokenRequestHeaderParams, 'POST', baseURL + requestTokenURL, this.ConsumerSecret);
            const result = await Request('POST', baseURL + requestTokenURL, this.TokenRequestHeaderParams);
            if ('errors' in result) {
                throw new CustomError(result);
            }
            this.setAccessToken(result.oauth_token, result.oauth_token_secret);
            return `${baseURL + authorizationURL}?oauth_token=${this.Token}`;
        };
        this.getAccessToken = async (verifier = '') => {
            this.TokenRequestHeaderParams = Util.createTokenRequestHeaderParams(this.ConsumerKey, { token: this.Token });
            this.TokenRequestHeaderParams = Util.createSignature(this.TokenRequestHeaderParams, 'POST', baseURL + accessTokenURL, this.ConsumerSecret, this.TokenSecret);
            this.TokenRequestHeaderParams.oauth_verifier = verifier;
            const result = await Request('POST', baseURL + accessTokenURL, this.TokenRequestHeaderParams);
            if ('errors' in result) {
                throw new CustomError(result);
            }
            this.setAccessToken(result.oauth_token, result.oauth_token_secret);
            return { oauth_token: result.oauth_token, oauth_token_secret: result.oauth_token_secret };
        };
        this.api = async (method, endpoint, params = {}) => {
            const apiEndpoint = endpoint.slice(0, 1) !== '/' ? `/${endpoint}` : endpoint;
            this.TokenRequestHeaderParams = Util.createTokenRequestHeaderParams(this.ConsumerKey, { token: this.Token, params });
            this.TokenRequestHeaderParams = Util.createSignature(this.TokenRequestHeaderParams, method, apiURL + apiEndpoint, this.ConsumerSecret, this.TokenSecret);
            const result = await Request(method, apiURL + (params ? `${apiEndpoint}?${Util.encodeParamsToString(params)}` : apiEndpoint), this.TokenRequestHeaderParams);
            if ('errors' in result) {
                throw new CustomError(result);
            }
            return result;
        };
        this.post = async (endpoint, params = {}) => {
            const result = await this.api('POST', endpoint, params);
            return result;
        };
        this.get = async (endpoint, params = {}) => {
            const result = await this.api('GET', endpoint, params);
            return result;
        };
    }
}
export default new Client();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2NsaWVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLE9BQU8sTUFBTSxXQUFXLENBQUM7QUFDaEMsT0FBTyxLQUFLLElBQUksTUFBTSxRQUFRLENBQUM7QUFPL0IsT0FBTyxXQUFXLE1BQU0sU0FBUyxDQUFDO0FBR2xDLE1BQU0sT0FBTyxHQUFXLHlCQUF5QixDQUFDO0FBQ2xELE1BQU0sTUFBTSxHQUFXLDZCQUE2QixDQUFDO0FBQ3JELE1BQU0sZUFBZSxHQUFXLHNCQUFzQixDQUFDO0FBQ3ZELE1BQU0sZ0JBQWdCLEdBQVcsa0JBQWtCLENBQUM7QUFDcEQsTUFBTSxjQUFjLEdBQVcscUJBQXFCLENBQUM7QUFFckQsTUFBTSxNQUFNO0lBQVo7UUFTRSw2QkFBd0IsR0FBUSxFQUFFLENBQUE7UUFLbEMsbUJBQWMsR0FBRyxDQUFDLFdBQW1CLEVBQUUsY0FBc0IsRUFBUSxFQUFFO1lBQ3JFLElBQUksQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDO1lBQy9CLElBQUksQ0FBQyxjQUFjLEdBQUcsY0FBYyxDQUFDO1FBQ3ZDLENBQUMsQ0FBQTtRQUtELG1CQUFjLEdBQUcsQ0FBQyxLQUFhLEVBQUUsV0FBbUIsRUFBUSxFQUFFO1lBQzVELElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1lBQ25CLElBQUksQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDO1FBQ2pDLENBQUMsQ0FBQTtRQUtELGdCQUFXLEdBQUcsS0FBSyxFQUFFLFdBQW1CLEVBQUUsRUFBbUIsRUFBRTtZQUM3RCxJQUFJLENBQUMsd0JBQXdCLEdBQUcsSUFBSSxDQUFDLDhCQUE4QixDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDO1lBQ3BHLElBQUksQ0FBQyx3QkFBd0IsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyx3QkFBd0IsRUFBRSxNQUFNLEVBQUUsT0FBTyxHQUFHLGVBQWUsRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7WUFFNUksTUFBTSxNQUFNLEdBQUcsTUFBTSxPQUFPLENBQzFCLE1BQU0sRUFDTixPQUFPLEdBQUcsZUFBZSxFQUN6QixJQUFJLENBQUMsd0JBQXdCLENBQzlCLENBQUM7WUFFRixJQUFJLFFBQVEsSUFBSSxNQUFNLEVBQUU7Z0JBQ3RCLE1BQU0sSUFBSSxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7YUFDL0I7WUFFRCxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsTUFBTSxDQUFDLGtCQUFrQixDQUFDLENBQUM7WUFFbkUsT0FBTyxHQUFHLE9BQU8sR0FBRyxnQkFBZ0IsZ0JBQWdCLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUNuRSxDQUFDLENBQUE7UUFLRCxtQkFBYyxHQUFHLEtBQUssRUFBRSxXQUFtQixFQUFFLEVBQXdCLEVBQUU7WUFDckUsSUFBSSxDQUFDLHdCQUF3QixHQUFHLElBQUksQ0FBQyw4QkFBOEIsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO1lBQzdHLElBQUksQ0FBQyx3QkFBd0IsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyx3QkFBd0IsRUFBRSxNQUFNLEVBQUUsT0FBTyxHQUFHLGNBQWMsRUFBRSxJQUFJLENBQUMsY0FBYyxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUM3SixJQUFJLENBQUMsd0JBQXdCLENBQUMsY0FBYyxHQUFHLFFBQVEsQ0FBQztZQUV4RCxNQUFNLE1BQU0sR0FBRyxNQUFNLE9BQU8sQ0FDMUIsTUFBTSxFQUNOLE9BQU8sR0FBRyxjQUFjLEVBQ3hCLElBQUksQ0FBQyx3QkFBd0IsQ0FDOUIsQ0FBQztZQUVGLElBQUksUUFBUSxJQUFJLE1BQU0sRUFBRTtnQkFDdEIsTUFBTSxJQUFJLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQzthQUMvQjtZQUVELElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRSxNQUFNLENBQUMsa0JBQWtCLENBQUMsQ0FBQztZQUVuRSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sQ0FBQyxXQUFXLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxDQUFDLGtCQUFrQixFQUFFLENBQUM7UUFDNUYsQ0FBQyxDQUFBO1FBS0QsUUFBRyxHQUFHLEtBQUssRUFBSyxNQUFjLEVBQUUsUUFBZ0IsRUFBRSxTQUFjLEVBQUUsRUFBYyxFQUFFO1lBQ2hGLE1BQU0sV0FBVyxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDO1lBRTdFLElBQUksQ0FBQyx3QkFBd0IsR0FBRyxJQUFJLENBQUMsOEJBQThCLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUM7WUFDckgsSUFBSSxDQUFDLHdCQUF3QixHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLHdCQUF3QixFQUFFLE1BQU0sRUFBRSxNQUFNLEdBQUcsV0FBVyxFQUFFLElBQUksQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBRXpKLE1BQU0sTUFBTSxHQUFHLE1BQU0sT0FBTyxDQUMxQixNQUFNLEVBQ04sTUFBTSxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLFdBQVcsSUFBSSxJQUFJLENBQUMsb0JBQW9CLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLEVBQ3ZGLElBQUksQ0FBQyx3QkFBd0IsQ0FDOUIsQ0FBQztZQUVGLElBQUksUUFBUSxJQUFJLE1BQU0sRUFBRTtnQkFDdEIsTUFBTSxJQUFJLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQzthQUMvQjtZQUVELE9BQU8sTUFBTSxDQUFDO1FBQ2hCLENBQUMsQ0FBQTtRQU1ELFNBQUksR0FBRyxLQUFLLEVBQUUsUUFBZ0IsRUFBRSxTQUFjLEVBQUUsRUFBZ0IsRUFBRTtZQUNoRSxNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQztZQUV4RCxPQUFPLE1BQU0sQ0FBQztRQUNoQixDQUFDLENBQUE7UUFNRCxRQUFHLEdBQUcsS0FBSyxFQUFFLFFBQWdCLEVBQUUsU0FBYyxFQUFFLEVBQWdCLEVBQUU7WUFDL0QsTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFFdkQsT0FBTyxNQUFNLENBQUM7UUFDaEIsQ0FBQyxDQUFBO0lBQ0gsQ0FBQztDQUFBO0FBRUQsZUFBZSxJQUFJLE1BQU0sRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyogbGliICovXG5pbXBvcnQgUmVxdWVzdCBmcm9tICcuL3JlcXVlc3QnO1xuaW1wb3J0ICogYXMgVXRpbCBmcm9tICcuL3V0aWwnO1xuaW1wb3J0IHtcbiAgTWV0aG9kLFxuICBSZXF1ZXN0VG9rZW5SZXNwb25zZSxcbiAgQWNjZXNzVG9rZW5SZXNwb25zZSxcbiAgQWNjZXNzVG9rZW4sXG59IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IEN1c3RvbUVycm9yIGZyb20gJy4vZXJyb3InO1xuXG4vKiBjb25zdCAqL1xuY29uc3QgYmFzZVVSTDogc3RyaW5nID0gJ2h0dHBzOi8vYXBpLnR3aXR0ZXIuY29tJztcbmNvbnN0IGFwaVVSTDogc3RyaW5nID0gJ2h0dHBzOi8vYXBpLnR3aXR0ZXIuY29tLzEuMSc7XG5jb25zdCByZXF1ZXN0VG9rZW5VUkw6IHN0cmluZyA9ICcvb2F1dGgvcmVxdWVzdF90b2tlbic7XG5jb25zdCBhdXRob3JpemF0aW9uVVJMOiBzdHJpbmcgPSAnL29hdXRoL2F1dGhvcml6ZSc7XG5jb25zdCBhY2Nlc3NUb2tlblVSTDogc3RyaW5nID0gJy9vYXV0aC9hY2Nlc3NfdG9rZW4nO1xuXG5jbGFzcyBDbGllbnQge1xuICBDb25zdW1lcktleSE6IHN0cmluZ1xuXG4gIENvbnN1bWVyU2VjcmV0ITogc3RyaW5nXG5cbiAgVG9rZW4hOiBzdHJpbmdcblxuICBUb2tlblNlY3JldCE6IHN0cmluZ1xuXG4gIFRva2VuUmVxdWVzdEhlYWRlclBhcmFtczogYW55ID0ge31cblxuICAvKipcbiAgICogc2V0IGNvbnN1bWVyXG4gICAqL1xuICBzZXRDb25zdW1lcktleSA9IChjb25zdW1lcktleTogc3RyaW5nLCBjb25zdW1lclNlY3JldDogc3RyaW5nKTogdm9pZCA9PiB7XG4gICAgdGhpcy5Db25zdW1lcktleSA9IGNvbnN1bWVyS2V5O1xuICAgIHRoaXMuQ29uc3VtZXJTZWNyZXQgPSBjb25zdW1lclNlY3JldDtcbiAgfVxuXG4gIC8qKlxuICAgKiBzZXQgYWNjZXNzIHRva2VuXG4gICAqL1xuICBzZXRBY2Nlc3NUb2tlbiA9ICh0b2tlbjogc3RyaW5nLCB0b2tlblNlY3JldDogc3RyaW5nKTogdm9pZCA9PiB7XG4gICAgdGhpcy5Ub2tlbiA9IHRva2VuO1xuICAgIHRoaXMuVG9rZW5TZWNyZXQgPSB0b2tlblNlY3JldDtcbiAgfVxuXG4gIC8qKlxuICAgKiBnZXQgbG9naW4gcmVkaXJlY3QgdXJsXG4gICAqL1xuICBnZXRMb2dpblVybCA9IGFzeW5jIChjYWxsYmFjazogc3RyaW5nID0gJycpOiBQcm9taXNlPHN0cmluZz4gPT4ge1xuICAgIHRoaXMuVG9rZW5SZXF1ZXN0SGVhZGVyUGFyYW1zID0gVXRpbC5jcmVhdGVUb2tlblJlcXVlc3RIZWFkZXJQYXJhbXModGhpcy5Db25zdW1lcktleSwgeyBjYWxsYmFjayB9KTtcbiAgICB0aGlzLlRva2VuUmVxdWVzdEhlYWRlclBhcmFtcyA9IFV0aWwuY3JlYXRlU2lnbmF0dXJlKHRoaXMuVG9rZW5SZXF1ZXN0SGVhZGVyUGFyYW1zLCAnUE9TVCcsIGJhc2VVUkwgKyByZXF1ZXN0VG9rZW5VUkwsIHRoaXMuQ29uc3VtZXJTZWNyZXQpO1xuXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgUmVxdWVzdDxSZXF1ZXN0VG9rZW5SZXNwb25zZT4oXG4gICAgICAnUE9TVCcsXG4gICAgICBiYXNlVVJMICsgcmVxdWVzdFRva2VuVVJMLFxuICAgICAgdGhpcy5Ub2tlblJlcXVlc3RIZWFkZXJQYXJhbXMsXG4gICAgKTtcblxuICAgIGlmICgnZXJyb3JzJyBpbiByZXN1bHQpIHtcbiAgICAgIHRocm93IG5ldyBDdXN0b21FcnJvcihyZXN1bHQpO1xuICAgIH1cblxuICAgIHRoaXMuc2V0QWNjZXNzVG9rZW4ocmVzdWx0Lm9hdXRoX3Rva2VuLCByZXN1bHQub2F1dGhfdG9rZW5fc2VjcmV0KTtcblxuICAgIHJldHVybiBgJHtiYXNlVVJMICsgYXV0aG9yaXphdGlvblVSTH0/b2F1dGhfdG9rZW49JHt0aGlzLlRva2VufWA7XG4gIH1cblxuICAvKipcbiAgICogZ2V0IGFjY2VzcyB0b2tlblxuICAgKi9cbiAgZ2V0QWNjZXNzVG9rZW4gPSBhc3luYyAodmVyaWZpZXI6IHN0cmluZyA9ICcnKTogUHJvbWlzZTxBY2Nlc3NUb2tlbj4gPT4ge1xuICAgIHRoaXMuVG9rZW5SZXF1ZXN0SGVhZGVyUGFyYW1zID0gVXRpbC5jcmVhdGVUb2tlblJlcXVlc3RIZWFkZXJQYXJhbXModGhpcy5Db25zdW1lcktleSwgeyB0b2tlbjogdGhpcy5Ub2tlbiB9KTtcbiAgICB0aGlzLlRva2VuUmVxdWVzdEhlYWRlclBhcmFtcyA9IFV0aWwuY3JlYXRlU2lnbmF0dXJlKHRoaXMuVG9rZW5SZXF1ZXN0SGVhZGVyUGFyYW1zLCAnUE9TVCcsIGJhc2VVUkwgKyBhY2Nlc3NUb2tlblVSTCwgdGhpcy5Db25zdW1lclNlY3JldCwgdGhpcy5Ub2tlblNlY3JldCk7XG4gICAgdGhpcy5Ub2tlblJlcXVlc3RIZWFkZXJQYXJhbXMub2F1dGhfdmVyaWZpZXIgPSB2ZXJpZmllcjtcblxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IFJlcXVlc3Q8QWNjZXNzVG9rZW5SZXNwb25zZT4oXG4gICAgICAnUE9TVCcsXG4gICAgICBiYXNlVVJMICsgYWNjZXNzVG9rZW5VUkwsXG4gICAgICB0aGlzLlRva2VuUmVxdWVzdEhlYWRlclBhcmFtcyxcbiAgICApO1xuXG4gICAgaWYgKCdlcnJvcnMnIGluIHJlc3VsdCkge1xuICAgICAgdGhyb3cgbmV3IEN1c3RvbUVycm9yKHJlc3VsdCk7XG4gICAgfVxuXG4gICAgdGhpcy5zZXRBY2Nlc3NUb2tlbihyZXN1bHQub2F1dGhfdG9rZW4sIHJlc3VsdC5vYXV0aF90b2tlbl9zZWNyZXQpO1xuXG4gICAgcmV0dXJuIHsgb2F1dGhfdG9rZW46IHJlc3VsdC5vYXV0aF90b2tlbiwgb2F1dGhfdG9rZW5fc2VjcmV0OiByZXN1bHQub2F1dGhfdG9rZW5fc2VjcmV0IH07XG4gIH1cblxuICAvKipcbiAgICogY2FsbCBUd2l0dGVyIEFwaVxuICAgKi9cbiAgYXBpID0gYXN5bmMgPFQ+KG1ldGhvZDogTWV0aG9kLCBlbmRwb2ludDogc3RyaW5nLCBwYXJhbXM6IGFueSA9IHt9KTogUHJvbWlzZTxUPiA9PiB7XG4gICAgY29uc3QgYXBpRW5kcG9pbnQgPSBlbmRwb2ludC5zbGljZSgwLCAxKSAhPT0gJy8nID8gYC8ke2VuZHBvaW50fWAgOiBlbmRwb2ludDtcblxuICAgIHRoaXMuVG9rZW5SZXF1ZXN0SGVhZGVyUGFyYW1zID0gVXRpbC5jcmVhdGVUb2tlblJlcXVlc3RIZWFkZXJQYXJhbXModGhpcy5Db25zdW1lcktleSwgeyB0b2tlbjogdGhpcy5Ub2tlbiwgcGFyYW1zIH0pO1xuICAgIHRoaXMuVG9rZW5SZXF1ZXN0SGVhZGVyUGFyYW1zID0gVXRpbC5jcmVhdGVTaWduYXR1cmUodGhpcy5Ub2tlblJlcXVlc3RIZWFkZXJQYXJhbXMsIG1ldGhvZCwgYXBpVVJMICsgYXBpRW5kcG9pbnQsIHRoaXMuQ29uc3VtZXJTZWNyZXQsIHRoaXMuVG9rZW5TZWNyZXQpO1xuXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgUmVxdWVzdDxUPihcbiAgICAgIG1ldGhvZCxcbiAgICAgIGFwaVVSTCArIChwYXJhbXMgPyBgJHthcGlFbmRwb2ludH0/JHtVdGlsLmVuY29kZVBhcmFtc1RvU3RyaW5nKHBhcmFtcyl9YCA6IGFwaUVuZHBvaW50KSxcbiAgICAgIHRoaXMuVG9rZW5SZXF1ZXN0SGVhZGVyUGFyYW1zLFxuICAgICk7XG5cbiAgICBpZiAoJ2Vycm9ycycgaW4gcmVzdWx0KSB7XG4gICAgICB0aHJvdyBuZXcgQ3VzdG9tRXJyb3IocmVzdWx0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIGFwaShcIlBPU1RcIixlbmRwb2ludCxwYXJhbXMpIGFsaWFzXG4gICAqIHdpbGwgYmUgcmVtb3ZlIGF0IG5leHQgdmVyc2lvblxuICAgKi9cbiAgcG9zdCA9IGFzeW5jIChlbmRwb2ludDogc3RyaW5nLCBwYXJhbXM6IGFueSA9IHt9KTogUHJvbWlzZTxhbnk+ID0+IHtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLmFwaSgnUE9TVCcsIGVuZHBvaW50LCBwYXJhbXMpO1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBhcGkoXCJHRVRcIixlbmRwb2ludCxwYXJhbXMpIGFsaWFzXG4gICAqIHdpbGwgYmUgcmVtb3ZlIGF0IG5leHQgdmVyc2lvblxuICAgKi9cbiAgZ2V0ID0gYXN5bmMgKGVuZHBvaW50OiBzdHJpbmcsIHBhcmFtczogYW55ID0ge30pOiBQcm9taXNlPGFueT4gPT4ge1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuYXBpKCdHRVQnLCBlbmRwb2ludCwgcGFyYW1zKTtcblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgbmV3IENsaWVudCgpO1xuIl19