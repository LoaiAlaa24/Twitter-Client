import * as Util from './util';
const request = async (method = 'GET', url = '', params = {}) => {
    const uri = url
        .replace(/!/g, '%21')
        .replace(/'/g, '%27')
        .replace(/\(/g, '%28')
        .replace(/\)/g, '%29')
        .replace(/\*/g, '%2A');
    const options = {
        method,
        headers: {
            Authorization: Util.createHeaderString(params),
        },
    };
    const response = await fetch(uri, options);
    const contentType = response.headers.get('content-type');
    if (contentType && contentType.indexOf('application/json') !== -1) {
        const result = await response.json();
        return result;
    }
    const result = await response.text();
    return Util.parseFormEncoding(result);
};
export default request;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVxdWVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9yZXF1ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sS0FBSyxJQUFJLE1BQU0sUUFBUSxDQUFDO0FBRy9CLE1BQU0sT0FBTyxHQUFHLEtBQUssRUFBSyxTQUFpQixLQUFLLEVBQUUsTUFBYyxFQUFFLEVBQUUsU0FBYyxFQUFFLEVBQThCLEVBQUU7SUFDbEgsTUFBTSxHQUFHLEdBQUcsR0FBRztTQUNaLE9BQU8sQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDO1NBQ3BCLE9BQU8sQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDO1NBQ3BCLE9BQU8sQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDO1NBQ3JCLE9BQU8sQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDO1NBQ3JCLE9BQU8sQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFFekIsTUFBTSxPQUFPLEdBQUc7UUFDZCxNQUFNO1FBQ04sT0FBTyxFQUFFO1lBQ1AsYUFBYSxFQUFFLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLENBQUM7U0FDL0M7S0FDRixDQUFDO0lBRUYsTUFBTSxRQUFRLEdBQUcsTUFBTSxLQUFLLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBRTNDLE1BQU0sV0FBVyxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBR3pELElBQUksV0FBVyxJQUFJLFdBQVcsQ0FBQyxPQUFPLENBQUMsa0JBQWtCLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRTtRQUNqRSxNQUFNLE1BQU0sR0FBRyxNQUFNLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUVyQyxPQUFPLE1BQU0sQ0FBQztLQUNmO0lBR0QsTUFBTSxNQUFNLEdBQUcsTUFBTSxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7SUFFckMsT0FBTyxJQUFJLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDeEMsQ0FBQyxDQUFDO0FBRUYsZUFBZSxPQUFPLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBsaWIgKi9cbmltcG9ydCAqIGFzIFV0aWwgZnJvbSAnLi91dGlsJztcbmltcG9ydCB7IE1ldGhvZCwgRXJyb3JSZXNwb25zZSB9IGZyb20gJy4vdHlwZXMnO1xuXG5jb25zdCByZXF1ZXN0ID0gYXN5bmMgPFQ+KG1ldGhvZDogTWV0aG9kID0gJ0dFVCcsIHVybDogc3RyaW5nID0gJycsIHBhcmFtczogYW55ID0ge30pOiBQcm9taXNlPFQgfCBFcnJvclJlc3BvbnNlPiA9PiB7XG4gIGNvbnN0IHVyaSA9IHVybFxuICAgIC5yZXBsYWNlKC8hL2csICclMjEnKVxuICAgIC5yZXBsYWNlKC8nL2csICclMjcnKVxuICAgIC5yZXBsYWNlKC9cXCgvZywgJyUyOCcpXG4gICAgLnJlcGxhY2UoL1xcKS9nLCAnJTI5JylcbiAgICAucmVwbGFjZSgvXFwqL2csICclMkEnKTtcblxuICBjb25zdCBvcHRpb25zID0ge1xuICAgIG1ldGhvZCxcbiAgICBoZWFkZXJzOiB7XG4gICAgICBBdXRob3JpemF0aW9uOiBVdGlsLmNyZWF0ZUhlYWRlclN0cmluZyhwYXJhbXMpLFxuICAgIH0sXG4gIH07XG5cbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh1cmksIG9wdGlvbnMpO1xuXG4gIGNvbnN0IGNvbnRlbnRUeXBlID0gcmVzcG9uc2UuaGVhZGVycy5nZXQoJ2NvbnRlbnQtdHlwZScpO1xuXG4gIC8qIGpzb24gKi9cbiAgaWYgKGNvbnRlbnRUeXBlICYmIGNvbnRlbnRUeXBlLmluZGV4T2YoJ2FwcGxpY2F0aW9uL2pzb24nKSAhPT0gLTEpIHtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyogZW5jb2RlZCAqL1xuICBjb25zdCByZXN1bHQgPSBhd2FpdCByZXNwb25zZS50ZXh0KCk7XG5cbiAgcmV0dXJuIFV0aWwucGFyc2VGb3JtRW5jb2RpbmcocmVzdWx0KTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHJlcXVlc3Q7XG4iXX0=